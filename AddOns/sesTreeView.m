%% sesTreeView(SES_NAME)
%  author:  Birger Freymann
%  version: 13.09.2016 Germany | Wismar University

% needs MATLAB GUI LAYOUT Toolbox in order to work

% EXAMPLES:
%sesTreeView('VarSubSys_DynCoup.mat')
%sesTreeView('SortingSES2.mat')

function sesTreeView(sesName)
if nargin == 0
    [FileName,PathName] = uigetfile('*.mat','Choose a SES mat file','');
    sesName = [PathName,FileName];
end


%load SES and create Figure
ses = load(sesName);
aHdls = initFigure(sesName);

%rename loaded SES
ses = ses.new;

%all Keys of the SES Container Map
keys  = ses.nodes.keys;  

%Get the Root Node to Start
ConMap = ses.nodes;
Node   = ses.nodes(keys{1}); 

%Box Next to SES Tree holding Specrules, Couplings, Aspectrules
% h(3)HBox = addVBox(h(2));

%Create Recusive TreeView Model
recuFun(aHdls(2),ConMap,Node,aHdls)

%Add SES VARS + FUN + SEMANTIC COND
maxElCnt = addGlobalSESData(aHdls(3),ses);
aHdls(1).Heights(2) = 20+maxElCnt*15;


%ToDo next >>
    try
        aHdls(1).Heights(3) = 18*5+60;
    catch
    end
    try    
        aHdls(4).Heights = [20 20*5];
    catch
    end
end

function h = initFigure(FigureName)
hFig = figure(...
    'Name',                 FigureName,...
    'NumberTitle',          'off',...                
    'MenuBar',              'None',... 
    'units',                'normalized',...
    'outerposition',        [0 0 1 0.95],...
    'Color',                [1 1 1]); 

uimenu(hFig,...
    'Label',                'Save Figure as SVG',...
    'Callback',             @(~,~)fig2svg(FigureName))

%MainBox
h(1) = VBoxFlex(hFig);
h(2) = VBox(h(1));
h(3) = HBoxFlex(h(1));
h(4) = GridFlex(h(1),'UserData',ones(1,6));
end

function recuFun(Parent,ConMap,Node,aHdls)
h = NodeBox(Parent,ConMap,Node,aHdls);
for i = Node.children
    ChildNode = ConMap([Node.treepath,'/',i{1}]);
    recuFun(h,ConMap,ChildNode,aHdls)        
end
end

function h = NodeBox(Parent,ConMap,Node,aHdls)
%Main Drawing Box
hVBox = VBox(Parent);

%Add Box Element
addLinesAbove(hVBox,ConMap,Node)
uiText(hVBox,Node.name)
addLinesBelow(hVBox,Node,aHdls)
addMChLine(hVBox,Node)
h = HBoxFlex(hVBox);

%Defualt Heights
hVBox.Heights(1:4) = [20 20 20 1]; 
end

function uiText(Parent,Text,varargin)
uicontrol(...
    'Parent',               Parent,...
    'Style',                'text',...
    'String',               Text,...    
    'FontSize',             12,...
    'FontWeight',           'bold',...
    'ForegroundColor',      [0 0 0],... 
    'BackgroundColor',      [1 1 1],...
    'HorizontalAlignment',  'center',...
    varargin{:});
end

function h = HBoxFlex(Parent,varargin)
h = uix.HBoxFlex(...
    'Parent',               Parent,...
    'Padding',              0,...
    'Spacing',              10,...
    'DividerMarkings',      'off',...
    'BackGroundColor',      [1 1 1],...
    varargin{:});
end

function h = HBox(Parent,varargin)
h = uix.HBox(...
    'Parent',               Parent,...
    'Padding',              0,...
    'Spacing',              10,...    
    'BackGroundColor',      [1 1 1],...
    varargin{:});
end

function h = VBoxFlex(Parent,varargin)
h = uix.VBoxFlex(...
    'Parent',               Parent,...
    'Padding',              10,...
    'Spacing',              5,...
    'DividerMarkings',      'off',...
    'BackGroundColor',      [1 1 1],...
    varargin{:});
end

function h = VBox(Parent,varargin)
h = uix.VBox(...
    'Parent',               Parent,...
    'Padding',              0,...
    'Spacing',              0,...
    'BackGroundColor',      [1 1 1],...
    varargin{:});
end

function h = GridFlex(Parent,varargin)
h = uix.GridFlex(...
    'Parent',               Parent,...
    'Padding',              0,...
    'Spacing',              3,...
    'DividerMarkings',      'off',...
    'BackGroundColor',      [1 1 1],...
    varargin{:});
end

function fig2svg(FigureName)
[FileName,PathName] = uiputfile('.svg','Save File as',FigureName(1:end-4));
saveas(gcf,[PathName,FileName],'svg')
end

function DataBox(Parent,Head,DataStr)
hVBox = VBox(Parent);

uiText(hVBox,[Head,':'],... 
    'FontSize',             10,...
    'HorizontalAlignment',  'left');
hVBox.Heights = 18;

uiText(hVBox,DataStr,...        
    'FontSize',             10,...
    'FontWeight',           'normal',...
    'HorizontalAlignment',  'left',...
    'FontName',             get(0,'FixedWidthFontName'));  
end

function addLinesAbove(Parent,ConMap,Node)
hHBox = HBox(Parent,...
    'Spacing',          3);

uix.Empty(...
    'Parent',           hHBox,...
    'BackGroundColor',  [1 1 1]);

hPan = uipanel(...
    'Parent',           hHBox,...
    'Title',            '',...
    'BackgroundColor',  [1 1 1],...
    'BorderWidth',      0,...
    'BorderType',       'none',...
    'FontSize',         12,...
    'Units',            'normalized',...
    'FontWeight',       'bold',...
    'ForegroundColor',  [0 0 0],...    
    'TitlePosition',    'CenterTop');

hHBox.Widths(2) = 10;

ax = axes(hPan,...  
    'XLim',             [0, 1],...
    'XTick',            [],...
    'YTick',            []);
set(ax,...
    'Position',         [0 0 1 1]);

if ~isempty(Node.parent) 
    PNode = ConMap(fileparts(Node.treepath));    
    switch PNode.type
        case 'Entity'
        %txt = '|';
        line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)            
        
        case 'Spec'   
        %txt = '||';
        line(ax,...
            'XData',        [0,     0],...
            'YData',        [0,     1],...
            'LineWidth',    1)            
        line(ax,...
            'XData',        [1,     1],...
            'YData',        [0,     1],...
            'LineWidth',    1) 
        case 'Aspect'
        %txt = '|'; 
        line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)            
        
        case 'MAspect'
        %txt = '|||';
        line(ax,...
            'XData',        [0,     0],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        line(ax,....
            'XData',        [1,     1],...
            'YData',        [0,     1],...
            'LineWidth',    1)
    end
else
	%txt = '';
end

set(ax,'Visible','off');

% uiText(hHBox,txt,...
%     'FontSize',             14,...
%     'FontWeight',           'normal'); 

uix.Empty(...
    'Parent',               hHBox,...
    'BackGroundColor',  [1 1 1]);
end

function maxElCnt = addGlobalSESData(Parent,ses)
% SES Variables
DataBox(Parent,'SES Vars',sprintf('%s\n',ses.var{:,1}));

% SES Functions
%collect all the ses fun names
num_fcns = numel(ses.fcn);
fcn_names = cell(1,num_fcns);
for i = 1:num_fcns
    fcn_names{i} = ses.fcn{i}.Filename;
end

DataBox(Parent,'SES Functions',sprintf('%s\n',fcn_names{:}));

% Semantic_Conditions
DataBox(Parent,'Semantic Conditions',sprintf('%s\n',ses.Semantic_Conditions{:}));

% Add Space for Dragging Elements
uix.Empty(...
    'Parent',           Parent,...
    'BackGroundColor',  [1 1 1]);

num(1) = numel(ses.var(:,1));
num(2) = num_fcns;
num(3) = numel(ses.Semantic_Conditions);

maxElCnt = max(num);
end

function addMChLine(Parent,Node)
hPan = uipanel(...
    'Parent',               Parent,...
    'Title',                '',...
    'BackgroundColor',      [1 1 1],...
    'BorderWidth',          0,...
    'BorderType',           'none',...
    'FontSize',             12,...
    'Units',                'normalized',...
    'FontWeight',           'bold',...
    'ForegroundColor',      [0 0 0],...    
    'TitlePosition',        'CenterTop');

numCh = numel(Node.children);

%MIDDLE LINES
if numCh > 1    
ax = axes(hPan,...  
    'XLim',             [0, 1],...
    'YTick',            []);
set(ax,...
    'Position',         [0 0 1 1]);
    line(ax,...
        'XData',        [0,    1],... 
        'YData',        [0,    0],...
        'LineWidth',    1)
set(ax,'Visible','off');
end
end

function addLinesBelow(Parent,Node,aHdls)
hHBox = HBox(Parent,...
    'Spacing',              3);

uix.Empty(...
    'Parent',               hHBox,...
    'BackGroundColor',      [1 1 1]);

hPan = uipanel(...
    'Parent',               hHBox,...
    'Title',                '',...
    'BackgroundColor',      [1 1 1],...
    'BorderWidth',          0,...
    'BorderType',           'none',...
    'FontSize',             12,...
    'Units',                'normalized',...
    'FontWeight',           'bold',...
    'ForegroundColor',      [0 0 0],...    
    'TitlePosition',        'CenterTop');

hHBox.Widths(2) = 10;

ax = axes(hPan,...  
    'XLim',             [0, 1],...
    'XTick',            [],...
    'YTick',            []);
set(ax,...
    'Position',         [0 0 1 1]);

numCh = numel(Node.children);
%UPPER LINES
if numCh > 0 %False if Leaf Node
    switch Node.type
         case 'Entity'
        %txt = '|';
         line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        
        case 'Spec'   
        %txt = '||';
         line(ax,...
            'XData',        [0,     0],...
            'YData',        [0,     1],...
            'LineWidth',    1)            
        line(ax,...
            'XData',        [1,     1],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        
        case 'Aspect'
        %txt = '|'; 
        line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)            
        
        case 'MAspect'
        %txt = '|||';
        line(ax,...
            'XData',        [0,     0],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        line(ax,...
            'XData',        [.50, .50],...
            'YData',        [0,     1],...
            'LineWidth',    1)
        line(ax,....
            'XData',        [1,     1],...
            'YData',        [0,     1],...
            'LineWidth',    1)       
    end
else
	%txt = '';
end

set(ax,'Visible','off');

% uiText(hHBox,txt,...
%     'FontSize',             14,...
%     'FontWeight',           'normal');  
% hHBox.Widths(2) = 20;


%h(3).UserData = [cntAttr cntSpec cntAsp cntCoup cntNumR cntPrio]
info = {};
switch Node.type    
    case 'Entity'
        if iscellstr(Node.attributes)
            info{end+1} = sprintf('AT%d',aHdls(4).UserData(1)); 
            aHdls(4).UserData(1) = aHdls(4).UserData(1)+1;
            
            uiText(aHdls(4),[info{end},':'],... 
                'FontSize',             10,...
                'HorizontalAlignment',  'left');
                     
            attr = Node.attributes';                       
            uiText(aHdls(4),sprintf('%-12s %s\n',attr{:}),...        
                'FontSize',             10,...
                'FontWeight',           'normal',...
                'HorizontalAlignment',  'left',...
                'FontName',             get(0,'FixedWidthFontName'));           
        end
        
    case 'Spec'         
        info{end+1} = sprintf('SR%d',aHdls(4).UserData(2)); 
        aHdls(4).UserData(2) = aHdls(4).UserData(2)+1; 
           
        
    case 'Aspect'
%         if iscellstr(Node.coupling) || ischar(Node.coupling)             
%         end
        info{end+1} = sprintf('PR%d',aHdls(4).UserData(6)); 
        aHdls(4).UserData(6) = aHdls(4).UserData(6)+1;
                
        
    case 'MAspect'
        info{end+1} = sprintf('PR%d',aHdls(4).UserData(6)); 
        aHdls(4).UserData(6) = aHdls(4).UserData(6)+1;        
        
end

if ~isempty(info)
str_tmp = sprintf('%s,',info{:});
str_out = sprintf('{%s}',str_tmp(1:end-1));
else
    str_out = '';
end

uiText(hHBox,str_out,...        
    'FontSize',             10,...
    'FontWeight',           'normal',...
    'HorizontalAlignment',  'left');
end

%{
% function dispZid(obj)
%     Zid = readZid(obj);
%     clc
%     space = max(cellfun(@numel,Zid));
%     str1 = sprintf('%%-%ds    %%-%ds    %%-%ds    %%-%ds;...\n', space+2);
%     str2 = sprintf('%%-%ds    %%-%ds    %%-%ds    %%-%ds ...\n', space+2);
% 
%     disp('{...')
%     for i = Zid'
%         p1 = ['''',i{1},''''];
%         p2 = ['''',i{2},''''];
%         p3 = ['''',i{3},''''];
%         p4 = ['''',i{4},''''];
%         if all(strcmp(i,Zid(end,:)'))
%             fprintf(1,str2,p1,p2,p3,p4);
%         else
%             fprintf(1,str1,p1,p2,p3,p4);
%         end
%     end
%     disp('}')            
% end
%}
