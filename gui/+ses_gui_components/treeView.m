
classdef treeView < DefSett
    properties
        hData
        parent
    end
    methods
        function obj = treeView(parent)
            if nargin
                obj.parent = parent;
            else
                obj.parent = [];
            end
            obj.hData.fig = figure(...
                'Units',            'normalized',...
                'Position',         [.3 .1 .4 .6],...
                'Color',            [1 1 1],...
                'Name',             'SES TREEVIEW',...
                'MenuBar',          'none',...
                'ToolBar',          'none',...
                'NumberTitle',      'off',...
                'Visible',          'off',...
                'CloseRequestFcn',  @obj.HideFcn);
            uimenu(obj.hData.fig,...
                'Label',            'Update',...
                'ForegroundColor',  'red',...
                'Callback',         @(~,~)updateWindow(obj))            
            uimenu(obj.hData.fig,...
                'Label',            '        ')
            uimenu(obj.hData.fig,...
                'Label',            'Save as SVG',...
                'ForegroundColor',  'red',...
                'Callback',         @(~,~)fig2svg(obj))               
        end
        
        function HideFcn(obj,varargin)
            set(obj.hData.fig,'Visible','off');            
            try
                obj.parent.Hierarchy.hData.TreeViewBtn.setSelected(false);
            catch
            end
        end
        
        function delete(obj)
            set(obj.hData.fig,'CloseRequestFcn','closereq');
            try
                close(obj.hData.fig);
            catch
            end
            delete(obj.hData.fig)
        end
        
        function ShowFcn(obj)
            %hfigure.isvalid
            set(obj.hData.fig,'Visible','on');
        end
        function TF = isVisible(obj)
            TF = get(obj.hData.fig,'Visible');
        end
       
        function fig2svg(obj)
            %My_SES_Tree <--- get name of current ses file from obj !!!ToDo
            [FileName,PathName] = uiputfile('.svg','Save File as','My_SES_Tree');
            if FileName ~= 0
                saveas(obj.hData.fig,[PathName,FileName],'svg')
            end
        end
         
        function updateWindow(obj) 
            %==============================================================
            %{
            db_info = dbstack('-completenames');            
            for i = 2:numel(db_info)            
                disp(db_info(i).name)                
            end            
            disp(' ')
            CMap = obj.parent.Ses.nodes;            
            Keys = CMap.keys;
            %}
            %============================================================== 
            CMap = obj.parent.Ses.nodes;            
            Keys = CMap.keys;
            if ~isempty(Keys)
                ParentNode = CMap(Keys{1});
                ViewParent = obj.hData.fig;

                recuFun(ViewParent,CMap,ParentNode) 
            end
        end       
        
        
     end
end         

function recuFun(ViewParent,CMap,Node)
    h = NodeBox(ViewParent,CMap,Node);
    for i = Node.children
        ChildNode = CMap([Node.treepath,'/',i{1}]);
        recuFun(h,CMap,ChildNode)
    end
end

function h = NodeBox(Parent,ConMap,Node)
    %Main Drawing Box
    parentVBox = VBox(Parent);

    %Add Box Element
    addLinesAbove(parentVBox,Node,ConMap)
    uiText(parentVBox,Node.name)
    addLinesBelow(parentVBox,Node)
    addMChLine(parentVBox,Node)
    
    %Default Heights
    set(parentVBox,'Sizes',[20 15 20 1]);
    
    h = HBoxFlex(parentVBox);    
end

% { 
function uiText(Parent,Text,varargin)
    uicontrol(...
        'Parent',               Parent,...
        'Style',                'text',...
        'String',               Text,...
        'FontSize',             10,...
        'FontWeight',           'bold',...
        'ForegroundColor',      [0 0 0],...
        'BackgroundColor',      [1 1 1],...
        'HorizontalAlignment',  'center',...
        varargin{:});
end

function h = HBoxFlex(Parent,varargin)
    h = uiextras.HBoxFlex(...
        'Parent',               Parent,...
        'Padding',              0,...
        'Spacing',              10,...
        'DividerMarkings',      'off',...
        'BackGroundColor',      [1 1 1],...
        varargin{:});
end


function h = VBox(Parent,varargin)
    h = uiextras.VBox(...
        'Parent',               Parent,...
        'Padding',              0,...
        'Spacing',              0,...
        'BackGroundColor',      [1 1 1],...
        varargin{:});
end


function addLinesAbove(Parent,Node,ConMap)

    if ~isempty(Node.parent)
        PNode = ConMap(fileparts(Node.treepath));
        switch PNode.type
            case 'Entity'
                txt = '|';                
            case 'Spec'
                txt = '||';                
            case 'Aspect'
                txt = '|';                
            case 'MAspect'
                txt = '|||';  
            otherwise
                txt = '?';
        end
    else
        txt = '';
    end
    uiText(Parent,txt,'FontSize',14,'FontWeight','normal')
    
end


function addLinesBelow(Parent,Node)    

    numCh = numel(Node.children);
    %UPPER LINES
    if numCh > 0 %False if Leaf Node
        switch Node.type
            case 'Entity'
                txt = '|';
                
            case 'Spec'
                txt = '||';
                
            case 'Aspect'
                txt = '|';
                
            case 'MAspect'
                txt = '|||';   
            otherwise
                txt = '?';
        end
    else
        txt = '';
    end
    uiText(Parent,txt,'FontSize',14,'FontWeight','normal')    
end

function addMChLine(Parent,Node)
    hPan = uipanel(...
        'Parent',               Parent,...
        'Title',                '',...
        'BackgroundColor',      [1 1 1],...
        'BorderWidth',          0,...
        'BorderType',           'none',...
        'FontSize',             12,...
        'Units',                'normalized',...
        'FontWeight',           'bold',...
        'ForegroundColor',      [0 0 0],...
        'TitlePosition',        'CenterTop');

    numCh = numel(Node.children);

    %MIDDLE LINES
    if numCh > 1
        ax = axes(hPan,...
            'XLim',             [0, 1],...
            'YTick',            []);
        set(ax,...
            'Position',         [0 0 1 1]);
        line(ax,...
            'XData',        [0,    1],...
            'YData',        [0,    0],...
            'LineWidth',    1)
        set(ax,'Visible','off');
    end
end

%{
function h = HBox(Parent,varargin)
    h = uiextras.HBox(...
        'Parent',               Parent,...
        'Padding',              0,...
        'Spacing',              10,...
        'BackGroundColor',      [1 1 1],...
        varargin{:});
end

function addLinesAbove(Parent,Node,ConMap)
    hHBox = HBox(Parent,...
        'Spacing',          3);

    uiextras.Empty(...
        'Parent',           hHBox,...
        'BackGroundColor',  [1 1 1]);

    hPan = uipanel(...
        'Parent',           hHBox,...
        'Title',            '',...
        'BackgroundColor',  [1 1 1],...
        'BorderWidth',      0,...
        'BorderType',       'none',...
        'FontSize',         12,...
        'Units',            'normalized',...
        'FontWeight',       'bold',...
        'ForegroundColor',  [0 0 0],...
        'TitlePosition',    'CenterTop');
    
    uiextras.Empty(...
        'Parent',           hHBox,...
        'BackGroundColor',  [.1 .1 1]);

    set(hHBox,'Sizes',[-1 10 -1]);

    ax = axes(hPan,...
        'XLim',             [0, 1],...
        'XTick',            [],...
        'YTick',            []);
    set(ax,...
        'Position',         [0 0 1 1]);

    if ~isempty(Node.parent)
        PNode = ConMap(fileparts(Node.treepath));
        switch PNode.type
            case 'Entity'
                %txt = '|';
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)

            case 'Spec'
                %txt = '||';
                line(ax,...
                    'XData',        [0,     0],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,...
                    'XData',        [1,     1],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
            case 'Aspect'
                %txt = '|';
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)

            case 'MAspect'
                %txt = '|||';
                line(ax,...
                    'XData',        [0,     0],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,....
                    'XData',        [1,     1],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
        end
    else
        %txt = '';
    end

    set(ax,'Visible','off');   
end

function addLinesBelow(Parent,Node)
    hHBox = HBox(Parent,...
        'Spacing',              3);

    uiextras.Empty(...
        'Parent',               hHBox,...
        'BackGroundColor',      [1 1 1]);

    hPan = uipanel(...
        'Parent',               hHBox,...
        'Title',                '',...
        'BackgroundColor',      [1 1 1],...
        'BorderWidth',          0,...
        'BorderType',           'none',...
        'FontSize',             12,...
        'Units',                'normalized',...
        'FontWeight',           'bold',...
        'ForegroundColor',      [0 0 0],...
        'TitlePosition',        'CenterTop');

    uiextras.Empty(...
        'Parent',           hHBox,...
        'BackGroundColor',  [1 1 1]);

    set(hHBox,'Sizes',[-1 10 -1]);


    ax = axes(hPan,...
        'XLim',             [0, 1],...
        'XTick',            [],...
        'YTick',            []);
    set(ax,...
        'Position',         [0 0 1 1]);

    numCh = numel(Node.children);
    %UPPER LINES
    if numCh > 0 %False if Leaf Node
        switch Node.type
            case 'Entity'
                %txt = '|';
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)

            case 'Spec'
                %txt = '||';
                line(ax,...
                    'XData',        [0,     0],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,...
                    'XData',        [1,     1],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)

            case 'Aspect'
                %txt = '|';
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)

            case 'MAspect'
                %txt = '|||';
                line(ax,...
                    'XData',        [0,     0],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,...
                    'XData',        [.50, .50],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
                line(ax,....
                    'XData',        [1,     1],...
                    'YData',        [0,     1],...
                    'LineWidth',    1)
        end
    else
        %txt = '';
    end

    set(ax,'Visible','off');    
end
%}


